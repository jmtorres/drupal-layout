<?php

/**
 * @file
 * Responsive layout builder tool for Panels.
 */

use Drupal\layout\Layout;

/**
 * Implements hook_menu().
 */
function layout_menu() {
  $items = array();
  $items['admin/structure/layouts'] = array(
    'title' => 'Layouts',
    'description' => 'Manage list of layouts.',
    'page callback' => 'layout_page_list',
    'access callback' => 'user_access',
    'access arguments' => array('administer layouts'),
    'file' => 'layout.admin.inc',
  );
  $items['admin/structure/layouts/add'] = array(
    'title' => 'Add layout',
    'page callback' => 'layout_page_add',
    'access callback' => 'user_access',
    'access arguments' => array('administer layouts'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'layout.admin.inc',
  );
  $items['admin/structure/layouts/layout/%layout/edit'] = array(
    'title' => 'Edit layout',
    'page callback' => 'layout_page_edit',
    'page arguments' => array(4),
    'access callback' => 'user_access',
    'access arguments' => array('administer layouts'),
    'type' => MENU_CALLBACK,
    'file' => 'layout.admin.inc',
  );
  $items['admin/structure/layouts/layout/%layout/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('layout_delete_confirm', 4),
    'access callback' => 'user_access',
    'access arguments' => array('administer layouts'),
    'type' => MENU_CALLBACK,
    'file' => 'layout.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function layout_permission() {
  return array(
    'administer layouts' => array(
      'title' => t('Administer responsive layouts'),
      'description' => t('Administer backend settings for responsive layouts.'),
    ),
  );
}

/**
 * Implements hook_entity_info().
 */
function layout_entity_info() {
  $types['layout'] = array(
    'label' => 'Layout',
    'entity class' => 'Drupal\layout\Layout',
    'controller class' => 'Drupal\Core\Config\Entity\ConfigStorageController',
    'form controller class' => array(
      'default' => 'Drupal\layout\LayoutFormController',
    ),
    'list controller class' => 'Drupal\Core\Config\Entity\ConfigEntityListController',
    'list path' => 'admin/structure/layouts',
    'uri callback' => 'layout_uri',
    'config prefix' => 'layout',
    'entity keys' => array(
      'id' => 'id',
      'label' => 'label',
      'uuid' => 'uuid',
    ),
  );
  return $types;
}

/**
 * Entity URI callback.
 *
 * @param Drupal\layout\Layout $layout
 *   Layout configuration entity instance.
 *
 * @return array
 *   Entity URI information.
 */
function layout_uri(Layout $layout) {
  return array(
    'path' => 'admin/structure/layouts/layout/' . $layout->id(),
  );
}

/**
 * Load one layout object by its identifier.
 *
 * @return Drupal\layout\Layout
 *   Layout configuration entity instance.
 */
function layout_load($id) {
  return entity_load('layout', $id);
}

/**
 * Load all layout objects.
 *
 * @return array
 *   List of Drupal\layout\Layout instances keyed by id.
 */
function layout_load_all() {
  return entity_load_multiple('layout');
}

function layout_library_info() {
  $path = drupal_get_path('module', 'layout');
  $rld_path = $path . '/plugins/layouts/ResponsiveLayoutDesigner';

  $libraries['layout-rld'] = array(
    'title' => 'Responsive layout designer',
    'version' => '0.1',
    'js' => array(
      $rld_path . '/assets/js/plugins/breakup/jquery.breakup.js' => array(),
      $rld_path . '/app/main.js' => array(),
      $rld_path . '/app/libs/Utils/Utils.js' => array(),
      $rld_path . '/app/libs/LayoutManager/LayoutManager.js' => array(),
      $rld_path . '/app/libs/LayoutPreviewer/LayoutPreviewer.js' => array(),
      $rld_path . '/app/libs/LayoutList/LayoutList.js' => array(),
      $rld_path . '/app/libs/LayoutStep/LayoutStep.js' => array(),
      $rld_path . '/app/libs/StepManager/StepManager.js' => array(),
      $rld_path . '/app/libs/StepList/StepList.js' => array(),
      $rld_path . '/app/libs/Step/Step.js' => array(),
      $rld_path . '/app/libs/RegionList/RegionList.js' => array(),
      $rld_path . '/app/libs/Region/Region.js' => array(),
      $rld_path . '/app/libs/GridList/GridList.js' => array(),
      $rld_path . '/app/libs/Grid/Grid.js' => array(),
    ),
    'css' => array(
      $rld_path . '/assets/css/application.css' => array(),
      $rld_path . '/assets/css/grid.css' => array(),
    ),
  );

  $libraries['layout-admin'] = array(
    'title' => 'Layout admin interface',
    'version' => '0.1',
    'js' => array(
      $path . '/js/responsive-admin.js' => array(),
    ),
    'css' => array(
      $path . '/css/responsive-admin.css' => array(),
    ),
  );
  return $libraries;
}


/**
 * Implements hook_init().
 */
/*function layout_init() {
  // Don't load the ResponsiveLayoutDesigner preview bar on admin pages.
  if (arg(0) == 'admin') {
    return;
  }

  // Load the responsive layout object.
  ctools_include('plugins');
  $layouts = ctools_get_plugins('panels', 'layouts');
  $layout = $layouts['responsive'];

  $bunnypoints = layout_bunnypoint_load_all();
  $grids = gridbuilder_load_all();
  // Push the bunnypoints info to settings for the layoutPreviewer.
  drupal_add_js(array(
    'layout' => array(
      'bunnypoints' => $bunnypoints,
      'grids' => $grids,
    ),
  ), 'setting');

  // Add the ResponsiveLayoutDesigner application.
  layout_responsive_load_rld_application($layout['path']);
  drupal_add_css($layout['path'] . '/responsive-in-place.css');
  // Add integration code for Drupal.
  drupal_add_js($layout['path'] . '/responsive-in-place.js');
}*/

// == Regions =================================================================

/**
 * Get a list of layout names using the given region machine name.
 */
/*function layout_get_layouts_using_region($name) {
  $layouts = layout_get_responsive_layouts();
  $layouts_using_region = array();
  foreach ($layouts as $data) {
    if (isset($data['layout']->settings['regions']) && is_array($data['layout']->settings['regions']) && isset($data['layout']->settings['regions'][$name])) {
      $layouts_using_region[$data['layout']->name] = $data['title'];
    }
  }
  return $layouts_using_region;
}*/

/**
 * Build CSS for the bunnypoints with media queries.
 *
 * @param boolean $include_media_queries
 *   Whether generate one flat CSS without media queries (useful for
 *   administration), or wrap bunnypoints with media queries (for frontend).
 *
 * @todo
 *   Figure out a good way to avoid equal max/min-weights in subsequent
 *   bunnypoints if that is a problem.
 */
function layout_bunnypoint_get_css($include_media_queries = TRUE) {
  $bunnypoints = bunnypoint_load_all();

  $bunnypoint_css = array();
  $min_width = 0;

  $bunnypoint_count = count($bunnypoints);
  $bunnypoint_index = 0;
  foreach ($bunnypoints as $name => $bunnypoint) {
    if ($include_media_queries) {
      $first_bunnypoint = $bunnypoint_index == 0;
      $last_bunnypoint = ($bunnypoint_index == ($bunnypoint_count - 1));

      // Build the media query for this bunnypoint. The first item should not have
      // a min-width (open ended to 0), and the last item should have no max-width
      // (open-ended to infinity). Mid-items should both have a min-width and a
      // max-width.
      $bunnypoint_css[] =
        '@media screen and (' .
        ($first_bunnypoint ? '' : 'min-width:' . $min_width) .
        ((!$first_bunnypoint && !$last_bunnypoint) ? ') and (' : '') .
        ($last_bunnypoint ? '' : 'max-width:' . $bunnypoint->width) .
        ') {';
      // Get grid CSS from gridbuilder and apply some extra indentation.
      $bunnypoint_css[] = '  ' . str_replace("\n", "\n  ", gridbuilder_get_css($bunnypoint->grid, '.panel-responsive', '.rld-span-' . $name . '_'));
      $bunnypoint_css[] = "\n}";

      // Remember min-width for next bunnypoint if applicable. The bunnypoints
      // are in ascending width order, so we can rely on this sequence.
      $min_width = $bunnypoint->width;
      $bunnypoint_index++;
    }
    else {
      $bunnypoint_css[] = gridbuilder_get_css($bunnypoint->grid, NULL, NULL, TRUE);
    }
  }
  $css = join("\n", $bunnypoint_css);

  return $css;
}
